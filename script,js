(() => {
  // ====== Countdown ======
  const DEFAULT_MONTH = 6;   // June
  const DEFAULT_DAY   = 25;  // 25th
  const KEY = 'thptqg_exam_date';

  const elDate = document.getElementById('examDate');
  const elSave = document.getElementById('saveDate');

  const elDays  = document.getElementById('cd-days');
  const elHours = document.getElementById('cd-hours');
  const elMins  = document.getElementById('cd-mins');
  const elSecs  = document.getElementById('cd-secs');
  const elTarget = document.getElementById('targetText');

  function toDateStr(y,m,d){ return `${y}-${String(m).padStart(2,'0')}-${String(d).padStart(2,'0')}`; }
  function parseDateInput(str){ return new Date(`${str}T00:00:00`); }
  function fmtDate(dt){
    return dt.toLocaleDateString('vi-VN', { weekday:'short', year:'numeric', month:'long', day:'numeric' });
  }

  function defaultTarget(){
    const now = new Date();
    let t = new Date(`${toDateStr(now.getFullYear(), DEFAULT_MONTH, DEFAULT_DAY)}T00:00:00`);
    if (t.getTime() <= now.getTime()) t.setFullYear(t.getFullYear() + 1);
    return t;
  }

  function loadTarget(){
    const saved = localStorage.getItem(KEY);
    return saved ? parseDateInput(saved) : defaultTarget();
  }

  let target = loadTarget();
  elDate.value = localStorage.getItem(KEY) || toDateStr(target.getFullYear(), target.getMonth()+1, target.getDate());
  elTarget.textContent = `Mục tiêu: ${fmtDate(target)}`;

  elSave.addEventListener('click', () => {
    if (!elDate.value) return;
    localStorage.setItem(KEY, elDate.value);
    target = parseDateInput(elDate.value);
    elTarget.textContent = `Mục tiêu: ${fmtDate(target)}`;
    tick();
  });

  function ensureFuture(){
    const now = Date.now();
    if (target.getTime() <= now){
      target.setFullYear(target.getFullYear() + 1);
      const str = toDateStr(target.getFullYear(), target.getMonth()+1, target.getDate());
      localStorage.setItem(KEY, str);
      elDate.value = str;
      elTarget.textContent = `Mục tiêu: ${fmtDate(target)}`;
    }
  }

  function tick(){
    ensureFuture();
    const now = Date.now();
    const s = Math.max(0, Math.floor((target.getTime() - now)/1000));
    const d = Math.floor(s / 86400);
    const h = Math.floor((s % 86400) / 3600);
    const m = Math.floor((s % 3600) / 60);
    const sec = s % 60;

    elDays.textContent  = String(d);
    elHours.textContent = String(h).padStart(2,'0');
    elMins.textContent  = String(m).padStart(2,'0');
    elSecs.textContent  = String(sec).padStart(2,'0');
  }
  tick();
  setInterval(tick, 1000);

  // ====== Daily Quote (ZenQuotes) ======
  // API: https://zenquotes.io/api/random  -> [{q:"", a:""}]
  const QKEY = 'thptqg_quote';
  const QDATE = 'thptqg_quote_date';
  const qText = document.getElementById('quoteText');
  const qAuthor = document.getElementById('quoteAuthor');
  const btnRefresh = document.getElementById('refreshQuote');

  function todayStr(){
    const d = new Date();
    return `${d.getFullYear()}-${d.getMonth()+1}-${d.getDate()}`;
  }

  function setQuote(q, a){
    qText.textContent = `“${q}”`;
    qAuthor.textContent = a ? `— ${a}` : '';
  }

  async function fetchQuote(){
    try{
      const res = await fetch('https://zenquotes.io/api/random');
      if(!res.ok) throw new Error('quote failed');
      const data = await res.json();
      const q = data?.[0]?.q || 'Keep going.';
      const a = data?.[0]?.a || 'Unknown';
      localStorage.setItem(QKEY, JSON.stringify({q,a}));
      localStorage.setItem(QDATE, todayStr());
      setQuote(q,a);
    }catch{
      // fallback quote
      const fallbacks = [
        {q:"The secret of getting ahead is getting started.", a:"Mark Twain"},
        {q:"It always seems impossible until it’s done.", a:"Nelson Mandela"},
        {q:"Focus on being productive instead of busy.", a:"Tim Ferriss"},
      ];
      const pick = fallbacks[Math.floor(Math.random()*fallbacks.length)];
      setQuote(pick.q, pick.a);
    }
  }

  function loadQuote(){
    const savedDate = localStorage.getItem(QDATE);
    const saved = localStorage.getItem(QKEY);
    if (saved && savedDate === todayStr()){
      try{
        const {q,a} = JSON.parse(saved);
        setQuote(q,a);
        return;
      }catch{}
    }
    fetchQuote();
  }

  btnRefresh.addEventListener('click', fetchQuote);
  loadQuote();
})();
